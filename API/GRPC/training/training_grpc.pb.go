// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: API/GRPC/training/training.proto

package __

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainingServiceClient is the client API for TrainingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainingServiceClient interface {
	GetTraining(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*Training, error)
	GetTrainings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Trainings, error)
	AddTraining(ctx context.Context, in *Training, opts ...grpc.CallOption) (*empty.Empty, error)
}

type trainingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingServiceClient(cc grpc.ClientConnInterface) TrainingServiceClient {
	return &trainingServiceClient{cc}
}

func (c *trainingServiceClient) GetTraining(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*Training, error) {
	out := new(Training)
	err := c.cc.Invoke(ctx, "/training.TrainingService/GetTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingServiceClient) GetTrainings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Trainings, error) {
	out := new(Trainings)
	err := c.cc.Invoke(ctx, "/training.TrainingService/GetTrainings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingServiceClient) AddTraining(ctx context.Context, in *Training, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training.TrainingService/AddTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingServiceServer is the server API for TrainingService service.
// All implementations must embed UnimplementedTrainingServiceServer
// for forward compatibility
type TrainingServiceServer interface {
	GetTraining(context.Context, *wrappers.StringValue) (*Training, error)
	GetTrainings(context.Context, *empty.Empty) (*Trainings, error)
	AddTraining(context.Context, *Training) (*empty.Empty, error)
	mustEmbedUnimplementedTrainingServiceServer()
}

// UnimplementedTrainingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainingServiceServer struct {
}

func (UnimplementedTrainingServiceServer) GetTraining(context.Context, *wrappers.StringValue) (*Training, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraining not implemented")
}
func (UnimplementedTrainingServiceServer) GetTrainings(context.Context, *empty.Empty) (*Trainings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainings not implemented")
}
func (UnimplementedTrainingServiceServer) AddTraining(context.Context, *Training) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTraining not implemented")
}
func (UnimplementedTrainingServiceServer) mustEmbedUnimplementedTrainingServiceServer() {}

// UnsafeTrainingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingServiceServer will
// result in compilation errors.
type UnsafeTrainingServiceServer interface {
	mustEmbedUnimplementedTrainingServiceServer()
}

func RegisterTrainingServiceServer(s grpc.ServiceRegistrar, srv TrainingServiceServer) {
	s.RegisterService(&TrainingService_ServiceDesc, srv)
}

func _TrainingService_GetTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).GetTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.TrainingService/GetTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).GetTraining(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingService_GetTrainings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).GetTrainings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.TrainingService/GetTrainings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).GetTrainings(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingService_AddTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Training)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServiceServer).AddTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.TrainingService/AddTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServiceServer).AddTraining(ctx, req.(*Training))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainingService_ServiceDesc is the grpc.ServiceDesc for TrainingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.TrainingService",
	HandlerType: (*TrainingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTraining",
			Handler:    _TrainingService_GetTraining_Handler,
		},
		{
			MethodName: "GetTrainings",
			Handler:    _TrainingService_GetTrainings_Handler,
		},
		{
			MethodName: "AddTraining",
			Handler:    _TrainingService_AddTraining_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "API/GRPC/training/training.proto",
}
